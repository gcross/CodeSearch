
// Copyright (C) 2009-2011 Lorenzo Caminiti
// Use, modification, and distribution is subject to the
// Boost Software License, Version 1.0
// (see accompanying file LICENSE_1_0.txt or a copy at
// http://www.boost.org/LICENSE_1_0.txt).

#ifndef BOOST_LOCAL_AUX_FUNCTION_END_HPP_
#define BOOST_LOCAL_AUX_FUNCTION_END_HPP_

#include "../symbol.hpp"

// Public API.

// Must follow user local function definition code block `{ ... } END()`.
#define BOOST_LOCAL_AUX_FUNCTION_END(local_function_name) \
    }; /* closes functor class declaration */ \
    /* declares functor local variable to call the local function -- note: */ \
    /* terminates class decl with `;` above and repeate class name here so */ \
    /* to generate compile-time error in case `local_function_name` does */ \
    /* not match the one specified in the local function declaration seq */ \
    /* (because class name will be different) */ \
    BOOST_LOCAL_AUX_SYMBOL_FUNCTOR_CLASS_NAME(local_function_name) \
    /* declares functor object */ \
    BOOST_LOCAL_AUX_SYMBOL_FUNCTOR_OBJECT_NAME(local_function_name)( \
            BOOST_LOCAL_AUX_SYMBOL_ARGS_VARIABLE_NAME.value); \
    /* wraps functor ref into global functor type to pass it as tparam */ \
    BOOST_LOCAL_AUX_SYMBOL_FUNCTION_REF_NAME(local_function_name) \
            local_function_name( \
                    BOOST_LOCAL_AUX_SYMBOL_FUNCTOR_OBJECT_NAME( \
                    local_function_name));

// Must follow user local function definition code block `{ ... } END()`.
// This allows to rename the local function after its definition -- this can
// be usefull when local functions are automatically generated by macros which
// cannot ensure same name is used by both the declaration macro and the end
// macro (like for scope exit).
// LIMITATION: Renamed local function cannot be passed as tparams (this is
// because `CLASS_NAME()` macro cannot be used when renaming so the global
// functor class type cannot be determined by the `END_RENAME()` macro).
#define BOOST_LOCAL_AUX_FUNCTION_END_RENAME(new_local_function_name) \
    } /* closes functor class declaration */ \
    /* declares functor local variable to call the local function -- note: */ \
    /* the functor type is not repeated so the functor object can have a */ \
    /* name that does not match the one specified in the local function */ \
    /* declaration */ \
        new_local_function_name( \
            BOOST_LOCAL_AUX_SYMBOL_ARGS_VARIABLE_NAME.value); \

#endif // #include buard

